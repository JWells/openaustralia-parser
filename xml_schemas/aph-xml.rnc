namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"

start = element hansard {
	attribute xsi:noNamespaceSchemaLocation { "../../hansard.xsd" }
  ,attribute version { "2.1" }
  ,session.header
  ,element chamber.xscript {
    business.start
    ,(debate | adjournment | petition.group)+
  }
  ,element maincomm.xscript {
    business.start
    ,(debate | adjournment)+
  }?
  ,element answers.to.questions {
    debate
	}?
}

petition.group =
	element petition.group {
		element petition.groupinfo {
			element title { "PETITIONS" }
			,element page.no { xsd:integer }
			,element type { "Petitions" }
		}
		,interjection
		,petition+
# Seems strange for this to be here
		,subdebate.1?
	}

petition =
	element petition {
		element petitioninfo {
			element title { text }
			,element name.ids {
				element name.id { text }+
			}
			,element names {
				element name { text }+
			}
			,element no.signed { xsd:integer }
			,element page.no { xsd:integer }
		}
		,(quote | para)+
		,element presenter {
			element no.signed { xsd:integer }
			,talk.start
		}+
		,para?
	}

business.start =
  element business.start {
    element day.start { text }
    ,element separator { empty }?
    ,para
  }  

adjournment =
  element adjournment {
    element adjournmentinfo {
      element page.no { xsd:integer }*
      ,element time.stamp { xsd:time }?
    }
    ,para
  }

debate =
  element debate {
    debateinfo
    ,(subdebate.1 | motionnospeech | division | interjection | speech | para | motion | quote)+
  }

debateinfo =
  element debateinfo {
    title+
    ,element page.no { xsd:integer }*
    ,element time.stamp { xsd:time }?
    ,element type { text }
    ,element id.no { text }?
    ,element cognate {
      para?
      # Wouldn't expect the cognateinfo ever to be allowed to be empty
      ,element cognateinfo {
        title*
        ,element page.no { xsd:integer }?
        ,element type { text }?
        ,element id.no { text }?
      }
    }*
  }
 
subdebateinfo =
  element subdebateinfo {
    title*
    ,element page.no { text }*
    ,element id.no { text }?
		,element type { text }?
  }

title = 
  element title {
    para-text | title
  }

subdebate.1 =
  element subdebate.1 {
    subdebateinfo
# Would expect that there should be at least one of the following
    ,(subdebate.2 | motionnospeech | division | interjection | speech | para | motion | quote | question | answer | lista | interrupt | amendments | table)*
  }

subdebate.2 =
  element subdebate.2 {
    subdebateinfo
    ,(motionnospeech | division | interjection | speech | para | motion | quote | question | answer | lista | interrupt | amendments | table)+
  }

question =
  element question {
    talk.start
    ,(quote | para | continue | interjection)*
  }

answer =
  element answer {
    talk.start
    ,(quote | para | continue | interjection | motion | table)*
  }

interjection =
  element interjection {
    talk.start
  }

division =
  element division {
    element division.header {
      element time.stamp { xsd:time }
      ,para
    }
    ,para
    ,division.data
    ,para
    ,element division.result {
      para
    }
  }

names =
  element names {
    element name { text }+
  }
  
division.data =
  element division.data {
    element ayes {
			# Should expect this never to be empty
      element num.votes { xsd:integer | empty }
      ,element title { "AYES" }
      ,names
    }
    ,element noes {
			# Should expect this never to be empty
      element num.votes { xsd:integer | empty }
      ,element title { "NOES" }
      ,names
    }
		,element pairs {
    	element num.votes { xsd:integer }
			,element title { "PAIRS" }
			,names
		}?
  }
	
motionnospeech = 
  element motionnospeech {
    element name { text }
    ,element electorate { text }
    ,element role { text }
    ,element time.stamp { xsd:time }
    ,inline
		,(motion | para | lista | quote | continue | interjection | amendments | interrupt)*
  }

speech =
  element speech {
    talk.start
    ,(para | quote | separator | motion | interjection | amendments | continue | table | interrupt | lista)*
  }

separator =
	element separator { empty }

interrupt =
  element interrupt {
    para
  }

table = 
  element table {
  	attribute layout { "fixed" }
    ,attribute pgwide { "yes" }
    ,attribute width { text }?
    ,attribute margin-left { xsd:integer }?
    ,attribute orient { "landscape" }?
    ,attribute border-top-style { "solid" }?
    ,attribute border-top-color { "#000000" }?
    ,attribute border-top-width { "0.75pt" }?
    ,attribute border-bottom-style { "solid" }?
    ,attribute border-bottom-color { "#000000" }?
    ,attribute border-bottom-width { "0.75pt" }?
    ,tgroup
  }

tgroup =
  element tgroup {
    element colspec { empty }+
    ,element thead {
      row+
    }?
    ,element tbody {
      row+
    }
  }
  
row =
  element row {
    attribute style { "page-break-inside: avoid" }?
    ,entry+
  }

entry =
	element entry {
		attribute colspan { xsd:integer }?
		,attribute rowspan { xsd:integer }?
		,attribute hidden { "yes" }?
    ,attribute border-top-style { "solid" }?
    ,attribute border-top-color { "#000000" | "#008000" }?
    ,attribute border-top-width { point-size }?
    ,attribute border-bottom-style { "solid" }?
    ,attribute border-bottom-color { "#000000" }?
    ,attribute border-bottom-width { point-size }?
    ,attribute margin-left { xsd:integer | "" }
		,attribute border-left-style { "solid" }?
		,attribute border-left-color { "#000000" }?
		,attribute border-left-width { point-size }?
		,attribute border-right-style { "solid" }?
		,attribute border-right-color { "#000000" }?
		,attribute border-right-width { point-size }?
    ,((para | quote)+ | empty)
  }
  
continue =
  element continue {
    talk.start
  }

amendments =
  element amendments {
    element amendment {
      para+
    }+
  }

quote =
  element quote {
    attribute pgwide { "yes" }?
    ,(para | lista | table)+
  }

talk.start =
  element talk.start {
    talker
    ,para
  }

motion =
  element motion {
    attribute pgwide { "yes" }?
    ,(para | lista)+
  }

lista =
  element list {
    attribute type { "bullet" | "loweralpha" | "decimal" | "unadorned" | "lowerroman" | "upperalpha" | "upperroman-dotted" | "decimal-dotted" | "loweralpha-dotted" }
    # Really shouldn't expect a list ever to be empty
		,element item {
      attribute label { text }?
      ,(para | lista | table)+
    }*
  }

session.header =
  element session.header {
    element date { text }
    ,element parliament.no { xsd:integer }
    ,element session.no { xsd:integer }
    ,element period.no { xsd:integer }
    ,element chamber { "REPS" | "SENATE" }
    ,element page.no { xsd:integer }
    # The empty "" looks suspicious to me
    ,element proof { "0" | "1" | "" }
  }

talker =
  element talker {
	  # Should only expect one page.no and for it to be an integer
    element page.no { text }*
    & element time.stamp { xsd:time }?
    & element name {
      attribute role { "metadata" | "display" },
      text
    }*
    & element name.id { text }?
    & element electorate { text }?
    & element party { text }?
    & element role { text }?
    & element in.gov { "0" | "1" }?
    & element first.speech { "0" }?
  } |
  element talker {
    element name.id { text }
    ,element name {
      attribute role { "metadata" },
      text
    }
    ,element name {
      attribute role { "display" },
      text
    }?
  }

para =
  element para {
    attribute class { "block" | "ParlAmend" | "hdg5s" | "subsection" | "italic" | "smalltableleft" | "indenta" | "indentii" | "centre" | "ItemHead" | "Item" | "Definition" | "bold" }?
    ,attribute pgwide { "yes" }?
    ,para-text
  }
  
para-text =
  text+ & inline* & graphic*

graphic =
	element graphic {
		attribute href { text }
		,empty
	}

inline = 
  element inline {
    attribute ref { text }?
    ,attribute font-weight { "bold" }?
    # Font size can be something 2pt, 8.5pt, etc...
    ,attribute font-size { point-size }?
    ,attribute font-style { "italic" }?
		,attribute font-variant { "subscript" | "superscript"}?
    ,(text+ & inline*) 
  }

# Only allowing point sizes in increments of 0.25pt
point-size =
	xsd:string { pattern = "[0-9]+(\.(25|5|75))?pt" }